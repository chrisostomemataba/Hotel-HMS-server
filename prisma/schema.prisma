generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @db.VarChar(50)
  description String?          @db.VarChar(255)
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model User {
  id           String   @id @default(uuid())
  fullName     String   @map("full_name") @db.VarChar(100)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash")
  roleId       String   @map("role_id")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  role                    Role                 @relation(fields: [roleId], references: [id])
  staff                   Staff?
  createdReservations     Reservation[]        @relation("ReservationCreatedBy")
  receivedPayments        ReservationPayment[] @relation("PaymentReceivedBy")
  createdOrders           Order[]              @relation("OrderCreatedBy")
  receivedOrderPayments   OrderPayment[]       @relation("OrderPaymentReceivedBy")
  recordedAttendance      Attendance[]         @relation("AttendanceRecordedBy")
  receivedStockIn         StockIn[]            @relation("StockInReceivedBy")
  usedStockOut            StockOut[]           @relation("StockOutUsedBy")
  receivedIncome          Income[]             @relation("IncomeReceivedBy")
  paidExpenses            Expense[]            @relation("ExpensePaidBy")

  @@map("users")
}

model Staff {
  id            String    @id @default(uuid())
  fullName      String    @map("full_name") @db.VarChar(100)
  phoneNumber   String?   @map("phone_number") @db.VarChar(20)
  jobTitle      String?   @map("job_title") @db.VarChar(100)
  department    String?   @db.VarChar(100)
  dateOfJoining DateTime? @map("date_of_joining") @db.Date
  isActive      Boolean   @default(true) @map("is_active")
  userId        String?   @unique @map("user_id")
  createdAt     DateTime  @default(now()) @map("created_at")

  user       User?        @relation(fields: [userId], references: [id])
  attendance Attendance[]

  @@map("staff")
}

model Attendance {
  id         String    @id @default(uuid())
  staffId    String    @map("staff_id")
  date       DateTime  @db.Date
  clockIn    DateTime? @map("clock_in")
  clockOut   DateTime? @map("clock_out")
  recordedBy String?   @map("recorded_by")

  staff    Staff @relation(fields: [staffId], references: [id])
  recorder User? @relation("AttendanceRecordedBy", fields: [recordedBy], references: [id])

  @@map("attendance")
}

model Room {
  id            String      @id @default(uuid())
  roomNumber    String      @map("room_number") @db.VarChar(20)
  type          String?     @db.VarChar(50)
  status        String?     @db.VarChar(50)
  pricePerNight Decimal?    @map("price_per_night") @db.Decimal(10, 2)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  reservations  Reservation[]

  @@map("rooms")
}

model Reservation {
  id           String    @id @default(uuid())
  guestName    String?   @map("guest_name") @db.VarChar(100)
  guestPhone   String?   @map("guest_phone") @db.VarChar(20)
  roomId       String?   @map("room_id")
  checkInDate  DateTime? @map("check_in_date") @db.Date
  checkOutDate DateTime? @map("check_out_date") @db.Date
  numGuests    Int?      @map("num_guests")
  totalAmount  Decimal?  @map("total_amount") @db.Decimal(10, 2)
  status       String?   @db.VarChar(50)
  source       String?   @db.VarChar(50)
  createdBy    String?   @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  room     Room?                @relation(fields: [roomId], references: [id])
  creator  User?                @relation("ReservationCreatedBy", fields: [createdBy], references: [id])
  payments ReservationPayment[]

  @@map("reservations")
}

model ReservationPayment {
  id            String   @id @default(uuid())
  reservationId String   @map("reservation_id")
  amountPaid    Decimal  @map("amount_paid") @db.Decimal(10, 2)
  paymentMethod String   @map("payment_method") @db.VarChar(50)
  paidBy        String   @map("paid_by") @db.VarChar(100)
  paidAt        DateTime @map("paid_at")
  receivedBy    String?  @map("received_by")
  createdAt     DateTime @default(now()) @map("created_at")

  reservation Reservation @relation(fields: [reservationId], references: [id])
  receiver    User?       @relation("PaymentReceivedBy", fields: [receivedBy], references: [id])

  @@map("reservation_payments")
}

model MenuCategory {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(50)
  menuItems MenuItem[]

  @@map("menu_categories")
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String      @db.VarChar(100)
  categoryId  String      @map("category_id")
  price       Decimal     @db.Decimal(10, 2)
  isAvailable Boolean     @default(true) @map("is_available")
  createdAt   DateTime    @default(now()) @map("created_at")
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Order {
  id        String         @id @default(uuid())
  createdBy String?        @map("created_by")
  orderType String?        @map("order_type") @db.VarChar(50)
  reference String?        @db.VarChar(100)
  status    String?        @db.VarChar(50)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  creator   User?          @relation("OrderCreatedBy", fields: [createdBy], references: [id])
  items     OrderItem[]
  payments  OrderPayment[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String   @map("order_id")
  menuItemId String   @map("menu_item_id")
  quantity   Int
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at")

  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model OrderPayment {
  id            String   @id @default(uuid())
  orderId       String   @map("order_id")
  amountPaid    Decimal  @map("amount_paid") @db.Decimal(10, 2)
  paymentMethod String   @map("payment_method") @db.VarChar(50)
  paidBy        String   @map("paid_by") @db.VarChar(100)
  paidAt        DateTime @map("paid_at")
  receivedBy    String?  @map("received_by")

  order    Order @relation(fields: [orderId], references: [id])
  receiver User? @relation("OrderPaymentReceivedBy", fields: [receivedBy], references: [id])

  @@map("order_payments")
}

model InventoryCategory {
  id    String          @id @default(uuid())
  name  String          @db.VarChar(100)
  items InventoryItem[]

  @@map("inventory_categories")
}

model InventoryItem {
  id              String            @id @default(uuid())
  name            String            @db.VarChar(100)
  categoryId      String            @map("category_id")
  unit            String            @db.VarChar(50)
  minimumQuantity Int               @map("minimum_quantity")
  currentQuantity Int               @map("current_quantity")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  category        InventoryCategory @relation(fields: [categoryId], references: [id])
  stockIn         StockIn[]
  stockOut        StockOut[]

  @@map("inventory_items")
}

model StockIn {
  id              String        @id @default(uuid())
  inventoryItemId String        @map("inventory_item_id")
  quantity        Int
  receivedBy      String?       @map("received_by")
  dateReceived    DateTime      @map("date_received") @db.Date
  createdAt       DateTime      @default(now()) @map("created_at")
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  receiver        User?         @relation("StockInReceivedBy", fields: [receivedBy], references: [id])

  @@map("stock_in")
}

model StockOut {
  id              String        @id @default(uuid())
  inventoryItemId String        @map("inventory_item_id")
  quantity        Int
  usedBy          String?       @map("used_by")
  usedFor         String?       @map("used_for") @db.VarChar(100)
  dateUsed        DateTime      @map("date_used") @db.Date
  createdAt       DateTime      @default(now()) @map("created_at")
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  user            User?         @relation("StockOutUsedBy", fields: [usedBy], references: [id])

  @@map("stock_out")
}

model Income {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(10, 2)
  source        String   @db.VarChar(100)
  description   String?  @db.VarChar(255)
  paymentMethod String   @map("payment_method") @db.VarChar(50)
  receivedBy    String?  @map("received_by")
  dateReceived  DateTime @map("date_received")
  createdAt     DateTime @default(now()) @map("created_at")
  receiver      User?    @relation("IncomeReceivedBy", fields: [receivedBy], references: [id])

  @@map("income")
}

model Expense {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(10, 2)
  category      String   @db.VarChar(100)
  description   String?  @db.VarChar(255)
  paidBy        String?  @map("paid_by")
  paymentMethod String   @map("payment_method") @db.VarChar(50)
  datePaid      DateTime @map("date_paid")
  createdAt     DateTime @default(now()) @map("created_at")
  payer         User?    @relation("ExpensePaidBy", fields: [paidBy], references: [id])

  @@map("expenses")
}

model RolePermission {
  id         String  @id @default(uuid())
  roleId     String  @map("role_id")
  moduleName String  @map("module_name") @db.VarChar(50)
  canView    Boolean @default(false) @map("can_view")
  canCreate  Boolean @default(false) @map("can_create")
  canEdit    Boolean @default(false) @map("can_edit")
  canDelete  Boolean @default(false) @map("can_delete")

  role Role @relation(fields: [roleId], references: [id])

  @@unique([roleId, moduleName])
  @@map("role_permissions")
}